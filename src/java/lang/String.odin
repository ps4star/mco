package lang

// Util helpers for odin strings
String_is_empty :: proc(s: string) -> (bool)
{
	return !(len(s) > 0)
}

String_hash_code :: proc(s: string) -> (int)
{
	h: int = 0
	length: i32 = i32(len(s) >> 1)
	for i: int = 0; i < int(length); i += 1 {
		h = 15 * h + int(s[i])
	}
	return h
}

String_code_point_at :: #force_inline proc(this: string, i: int) -> (rune)
{
	return (rune)(this[i])
}


UNASSIGNED :: 0
UPPERCASE_LETTER :: 1
LOWERCASE_LETTER :: 2
TITLECASE_LETTER :: 3
MODIFIER_LETTER :: 4
OTHER_LETTER :: 5
NON_SPACING_MARK :: 6
ENCLOSING_MARK :: 7
COMBINING_SPACING_MARK :: 8
DECIMAL_DIGIT_NUMBER :: 9
LETTER_NUMBER :: 10
OTHER_NUMBER :: 11
SPACE_SEPARATOR :: 12
LINE_SEPARATOR :: 13
PARAGRAPH_SEPARATOR :: 14
CONTROL :: 15
FORMAT :: 16
PRIVATE_USE :: 18
SURROGATE :: 19
DASH_PUNCTUATION :: 20
START_PUNCTUATION :: 21
END_PUNCTUATION :: 22
CONNECTOR_PUNCTUATION :: 23
OTHER_PUNCTUATION :: 24
MATH_SYMBOL :: 25
CURRENCY_SYMBOL :: 26
MODIFIER_SYMBOL :: 27
OTHER_SYMBOL :: 28
INITIAL_QUOTE_PUNCTUATION :: 29
FINAL_QUOTE_PUNCTUATION :: 30

ERROR :: 0xFFFFFFFF

DIRECTIONALITY_UNDEFINED :: -1
DIRECTIONALITY_LEFT_TO_RIGHT :: 0
DIRECTIONALITY_RIGHT_TO_LEFT :: 1
DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC :: 2
DIRECTIONALITY_EUROPEAN_NUMBER :: 3
DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR :: 4
DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR :: 5
DIRECTIONALITY_ARABIC_NUMBER :: 6
DIRECTIONALITY_COMMON_NUMBER_SEPARATOR :: 7
DIRECTIONALITY_NONSPACING_MARK :: 8
DIRECTIONALITY_BOUNDARY_NEUTRAL :: 9
DIRECTIONALITY_PARAGRAPH_SEPARATOR :: 10
DIRECTIONALITY_SEGMENT_SEPARATOR :: 11
DIRECTIONALITY_WHITESPACE :: 12
DIRECTIONALITY_OTHER_NEUTRALS :: 13
DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING :: 14
DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE :: 15
DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING :: 16
DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE :: 17
DIRECTIONALITY_POP_DIRECTIONAL_FORMAT :: 18
DIRECTIONALITY_LEFT_TO_RIGHT_ISOLATE :: 19
DIRECTIONALITY_RIGHT_TO_LEFT_ISOLATE :: 20
DIRECTIONALITY_FIRST_STRONG_ISOLATE :: 21
DIRECTIONALITY_POP_DIRECTIONAL_ISOLATE :: 22

MIN_HIGH_SURROGATE : rune : 0xD800
MAX_HIGH_SURROGATE : rune : 0xDBFF
MIN_LOW_SURROGATE : rune : 0xDC00
MAX_LOW_SURROGATE  : rune : 0xDFFF

MIN_SURROGATE :: MIN_HIGH_SURROGATE
MAX_SURROGATE :: MAX_LOW_SURROGATE
MIN_SUPPLEMENTARY_CODE_POINT :: 0x010000
MIN_CODE_POINT :: 0x000000
MAX_CODE_POINT :: 0x10FFFF


Char_is_ascii :: #force_inline proc(ch: rune) -> (bool)
{
	return (ch & -128) == 0
}

Char_char_count :: proc(r: rune) -> (int)
{
	return 2 if (r >= rune(65_536)) else 1
}

@private
A := [?]int{1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1476411407, 1342193679, 1476411407, 1610629135, 1342193679, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1342193679, 1342193679, 1342193679, 1476411407, 1610629132, 1744830488, 1744830488, 671088664, 671113242, 671088664, 1744830488, 1744830488, -402653163, -402653162, 1744830488, 536870937, 939524120, 536870932, 939524120, 939524120, 402667017, 402667017, 402667017, 402667017, 402667017, 402667017, 402667017, 402667017, 402667017, 402667017, 939524120, 1744830488, -402653159, 1744830489, -402653159, 1744830488, 1744830488, 8552417, 8552417, 8552417, 8552417, 8552417, 8552417, 8552417, 8552417, 8552417, 8552417, 8552417, 8552417, 8552417, 8552417, 8552417, 8552417, 8552417, 8552417, 8552417, 8552417, 8552417, 8552417, 8552417, 8552417, 8552417, 8552417, -402653163, 1744830488, -402653162, 1744830491, 1744850967, 1744830491, 8486882, 8486882, 8486882, 8486882, 8486882, 8486882, 8486882, 8486882, 8486882, 8486882, 8486882, 8486882, 8486882, 8486882, 8486882, 8486882, 8486882, 8486882, 8486882, 8486882, 8486882, 8486882, 8486882, 8486882, 8486882, 8486882, -402653163, 1744830489, -402653162, 1744830489, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1342181391, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 1207963663, 939524108, 1744830488, 671113242, 671113242, 671113242, 671113242, 1744830492, 1744830488, 1744830491, 1744830492, 28677, -402653155, 1744830489, 1207963664, 1744830492, 1744830491, 671088668, 671088665, 402654731, 402654731, 1744830491, 134049794, 1744830488, 1744830488, 1744830491, 402654475, 28677, -402653154, 1744832523, 1744832523, 1744832523, 1744830488, 8548353, 8548353, 8548353, 8548353, 8548353, 8548353, 8548353, 8548353, 8548353, 8548353, 8548353, 8548353, 8548353, 8548353, 8548353, 8548353, 8548353, 8548353, 8548353, 8548353, 8548353, 8548353, 8548353, 1744830489, 8548353, 8548353, 8548353, 8548353, 8548353, 8548353, 8548353, 134049794, 8482818, 8482818, 8482818, 8482818, 8482818, 8482818, 8482818, 8482818, 8482818, 8482818, 8482818, 8482818, 8482818, 8482818, 8482818, 8482818, 8482818, 8482818, 8482818, 8482818, 8482818, 8482818, 8482818, 1744830489, 8482818, 8482818, 8482818, 8482818, 8482818, 8482818, 8482818, 102592514 }
Char_get_type :: proc(r: rune) -> (int)
{
	/*char offset :: (char)ch
        int props :: A[offset]
        return props*/

// int props :: this.getProperties(ch)
//    return props & 31
	offset: u8 = u8(r)
	_props := A[offset]
	return _props & 31
}

Char_is_high_surrogate :: proc(ch: rune) -> (bool)
{
	return ch >= 0xd800 && ch <= 0xdc00
}

Char_is_low_surrogate :: proc(ch: rune) -> (bool)
{
	return ch >= 0xdc00 && ch < 0xe000
}